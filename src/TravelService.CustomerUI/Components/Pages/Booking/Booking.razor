@page "/"
@inherits RedisSubscribingComponent
@inject IConfiguration Configuration
@using Microsoft.FluentUI.AspNetCore.Components
@using StackExchange.Redis
@using TravelService.CustomerUI.Clients.Backend
@using TravelService.CustomerUI.Components.Layout
@inject TravelAgentBackendClient Backend
@inject IJSRuntime JSRuntime

<div class="Booking">
   <FluentSplitter BarSize="6" BarHandle="false" Panel1MinSize="@(Bookings is null || (Bookings is not null && Bookings.AgentMessages.Count < 1) ? "100%" : "65%")" Panel2Size="@(Bookings is null || (Bookings is not null && Bookings.AgentMessages.Count < 1) ? "0%" : "35%")" Panel2MinSize="@(Bookings is null || (Bookings is not null && Bookings.AgentMessages.Count < 1) ? "0%" : "35%")" Class="splitter">
      <Panel1>
         <div class="messages-scroller">
            @if (Bookings is null && string.IsNullOrWhiteSpace(replyText))
            {
               <div class="suggestions">
                  <p>💡Suggestions: </p>
                  <div style="margin-top:-15px;">
                     @foreach (var suggestion in suggestions)
                     {
                        <a href @onclick="@(() => ApplySuggestion(suggestion))" @onclick:preventDefault>
                           <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor"><path d="M9.56158 3C5.41944 3 2.06158 6.35786 2.06158 10.5C2.06158 11.6329 2.31325 12.7088 2.76423 13.6734C2.5102 14.6714 2.22638 15.7842 2.03999 16.5147C1.80697 17.428 2.6294 18.2588 3.54374 18.039C4.29396 17.8587 5.44699 17.5819 6.47447 17.337C7.41678 17.7631 8.46241 18 9.56158 18C13.7037 18 17.0616 14.6421 17.0616 10.5C17.0616 6.35786 13.7037 3 9.56158 3ZM3.56158 10.5C3.56158 7.18629 6.24787 4.5 9.56158 4.5C12.8753 4.5 15.5616 7.18629 15.5616 10.5C15.5616 13.8137 12.8753 16.5 9.56158 16.5C8.60084 16.5 7.69487 16.2748 6.89161 15.8749L6.6482 15.7537L6.38368 15.8167C5.46095 16.0363 4.39489 16.2919 3.59592 16.4838C3.79467 15.7047 4.05784 14.6724 4.28601 13.7757L4.35619 13.4998L4.22568 13.2468C3.80145 12.4246 3.56158 11.4914 3.56158 10.5ZM14.5616 21.0001C12.5922 21.0001 10.8001 20.241 9.46191 18.9995C9.49511 18.9999 9.52835 19.0001 9.56163 19.0001C10.2796 19.0001 10.9768 18.911 11.6427 18.7434C12.5067 19.2254 13.5021 19.5001 14.5616 19.5001C15.5223 19.5001 16.4283 19.2748 17.2316 18.8749L17.475 18.7537L17.7395 18.8167C18.6611 19.0361 19.7046 19.2625 20.4787 19.4262C20.3037 18.6757 20.065 17.6711 19.8372 16.7757L19.767 16.4999L19.8975 16.2469C20.3217 15.4247 20.5616 14.4915 20.5616 13.5001C20.5616 11.3853 19.4676 9.52617 17.8146 8.45761C17.6363 7.73435 17.3653 7.04756 17.015 6.41052C19.9523 7.42684 22.0616 10.2171 22.0616 13.5001C22.0616 14.6332 21.8098 15.7094 21.3586 16.6741C21.6117 17.6821 21.8679 18.774 22.0304 19.4773C22.2348 20.3623 21.4554 21.1633 20.563 20.9768C19.8358 20.8248 18.6933 20.581 17.6495 20.3367C16.707 20.763 15.6611 21.0001 14.5616 21.0001Z"></path></svg>
                           @suggestion
                        </a>
                     }
                  </div>
               </div>
            }
            <div class="messages">
               <BookingMessages Booking="@Bookings" />
            </div>
         </div>
         <div class="write-message">
            <EditForm EditContext="@editContext" OnValidSubmit="@SendReplyAsync">
               <FluentTextArea @ref="replyTextArea" @bind-Value="@replyText" class="@(!string.IsNullOrWhiteSpace(replyText) ? "modified" : "")" Placeholder="Ask assistant" style="width: 100%; height: 100%;" />
               <div class="actions">
                  <div>
                     <FluentSelect TOption="AssistantType" @bind-SelectedOption="@assistantType" Items="@allAssistantTypes" OptionText="@AssistantTypeDisplayText" style="width: 100%;min-width: 12rem;"
                                   @bind-SelectedOption:after="@MarkTicketTypeModified" />
                  </div>
                  @if (!isSending)
                  {
                     <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent" IconStart="@sendIcon" Style="margin-left:10px;">Send</FluentButton>
                  }
                  else
                  {
                     <FluentProgressRing />
                  }
               </div>
            </EditForm>
         </div>
      </Panel1>
      <Panel2>
         <div class="assistant">
            <BookingAssistant Booking="@Bookings" />
         </div>
      </Panel2>
   </FluentSplitter>
</div>

@code {
   public enum AssistantType
   {
      Custom,
      SingleAI,
      AutoGen
   }
   private void MarkTicketTypeModified()
   {
      editContext.NotifyFieldChanged(FieldIdentifier.Create(() => assistantType));
   }
   string AssistantTypeDisplayText(AssistantType type) => type switch
   {
      AssistantType.Custom => "🛠️ CustomMultiAgent",
      AssistantType.SingleAI => "🤖 SingleAIAgent",
      AssistantType.AutoGen => "🧑‍🤝‍🧑🤖 AutoGen(In-Progess)",
      _ => "Unknown"
   };
   readonly AssistantType[] allAssistantTypes = Enum.GetValues<AssistantType>();
   AssistantType assistantType;
   private readonly Icon sendIcon = new Icons.Regular.Size20.Mail();
   private EditContext editContext;
   private BookingDetailsResult? Bookings;
   private string? replyText;
   private FluentTextArea? replyTextArea;
   private string sessionId = Guid.NewGuid().ToString();
   private string userId;
   private bool isSending;
   string[] suggestions = ["Can you help me plan a trip from chennai to goa on Sept 10th 2024 for 5 days?", "What you can help me with?", "Can you list my past bookings?"];
   [Parameter]
   public int BookingId { get; set; }

   public Booking() => editContext = new(this);

   [Parameter]
   public string SessionId { get; set; }

   protected override void OnInitialized()
   {
      userId = Configuration["UserId"] ?? "P012";
   }
   public async Task OnChatSelected(string chatId)
   {
      sessionId = chatId;
      Bookings = await Backend.GetBookingMessagesAsync(chatId, userId);
      SubscriptionChannel = RedisChannel.Literal($"booking:{sessionId}");
      StateHasChanged();
      await JSRuntime.InvokeVoidAsync("scrollMessageView");
   }

   protected override async Task OnParametersSetAsync()
   {
      Bookings = null;
      SubscriptionChannel = RedisChannel.Literal($"booking:{sessionId}");
   }
   private void ApplySuggestion(string suggestion)
   {
      replyText = suggestion;
      isSending = false;
      replyTextArea?.FocusAsync();
      editContext.NotifyFieldChanged(FieldIdentifier.Create(() => replyText));
   }
   private void AcceptSuggestedReply(string suggestion)
   {
      replyText = suggestion;
      replyTextArea?.FocusAsync();
      editContext.NotifyFieldChanged(FieldIdentifier.Create(() => replyText));
   }

   private async Task SendReplyAsync()
   {
      if (string.IsNullOrWhiteSpace(replyText))
      {
         return;
      }

      isSending = true;
      await Backend.TriggerMultiAgentOrchestrationAsync(replyText, sessionId, userId, assistantType);

      replyText = null;
      Bookings = await Backend.GetBookingMessagesAsync(sessionId, userId);
      editContext.MarkAsUnmodified();
      await JSRuntime.InvokeVoidAsync("scrollMessageView");
      StateHasChanged();
   }

   protected override async Task OnRedisNotificationAsync(RedisValue value)
   {
      Bookings = await Backend.GetBookingMessagesAsync(sessionId, userId);
      StateHasChanged();
      await JSRuntime.InvokeVoidAsync("scrollMessageView");
      isSending = false;
   }
   protected override async Task OnAfterRenderAsync(bool firstRender)
   {
      if (firstRender)
         await ScrollToChatView();
   }
   private async Task ScrollToChatView()
   {
      await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollMessageView = function() {
                     var messages = document.querySelectorAll('.message-text');
                     var assistantMessages = document.querySelectorAll('.assistant-message-text');
                        if (messages.length > 0) {
                            var lastMessage = messages[messages.length - 1];
                            lastMessage.scrollIntoView();
                        }
                        if (assistantMessages.length > 0) {
                            var lastMessage = assistantMessages[assistantMessages.length - 1];
                            lastMessage.scrollIntoView();
                        }
}");
   }

}
